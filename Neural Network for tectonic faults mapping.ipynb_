{"cells":[{"cell_type":"markdown","metadata":{"id":"xC_RBEESikZF"},"source":["\n","# Tectonic faults mapping on 3D seismic data with a Convolutional network "]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":23643,"status":"ok","timestamp":1680528676735,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"VP0gSGLWikZ1","outputId":"b16b7524-30f7-4eb7-e728-c7ec4446c0d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# Append Google disc\n","from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":36,"status":"ok","timestamp":1680528676739,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"HV0iwN0yjfm3"},"outputs":[],"source":["# Append files .py files on google disk\n","import sys\n","import os\n","\n","# path to python files on Google drive\n","py_file_location ='/content/drive/MyDrive/NN_for_tectonic_faults_mapping/' \n","sys.path.append(os.path.abspath(py_file_location))"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8165,"status":"ok","timestamp":1680528686815,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"19Q9y8DVikZZ","outputId":"ce9046fe-8ebd-45e7-fcfb-07a872b54dcf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model is loaded\n"]}],"source":["# Load Neural network model and paramets weights\n","from keras.models import load_model\n","from unet_model import *  \n","\n","# load json and create model \n","json_file = open('/content/drive/MyDrive/NN_for_tectonic_faults_mapping/model/Neural_network_model.json', 'r')\n","loaded_model_json = json_file.read()\n","json_file.close()\n","loaded_model = model_from_json(loaded_model_json)\n","# load weights into new model\n","loaded_model.load_weights('/content/drive/MyDrive/NN_for_tectonic_faults_mapping/model/weigts_for_pretrained_model.hdf5') \n","print('======================================')\n","print(\"Model is loaded\")"]},{"cell_type":"markdown","metadata":{"id":"sKRtq4rl0h6W"},"source":[" \n","## ====================================================================\n","\n","# Before being proceses with a Neural Network a seismic attribute is calculated\n","### It helps enhanse faults on seismic data\n","### Neural Network was trained to identify faults on Seismic attributes volumes\n","### An attribute volume will be calculated during the workflow, just upload original seismic."]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4302,"status":"ok","timestamp":1680528697697,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"iWYWIu5ZZHA5","outputId":"43674ebe-e101-40b8-ad6e-dfde417778e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting segyio\n","  Downloading segyio-1.9.11-cp39-cp39-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (84 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.2/84.2 KB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.10 in /usr/local/lib/python3.9/dist-packages (from segyio) (1.22.4)\n","Installing collected packages: segyio\n","Successfully installed segyio-1.9.11\n"]}],"source":["!pip install segyio\n","import segyio\n","import numpy as np"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2201,"status":"ok","timestamp":1680533604826,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"VoOlAJpezQXT","outputId":"a7efe730-6125-4e7b-ac85-30fe64428748"},"outputs":[{"output_type":"stream","name":"stdout","text":["Seismic data is imported\n","Size of input seismic cube (x,y,z) = (512, 384, 384)\n"]}],"source":["#@title Import seismic data in SEG-Y fromat\n","from utilits import *\n","\n","file_path ='/content/drive/MyDrive/NN_for_tectonic_faults_mapping/1_seismic_data/input_data/FullStack_PSTM_cropped.sgy'\n","seismic_cube = normalize_data (segyio.tools.cube(file_path))\n","m1,m2,m3 = seismic_cube.shape \n","print('======================================')\n","print('Seismic data is imported')\n","print('Size of input seismic cube (x,y,z) =', seismic_cube.shape)\n","\n"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"hknwm76B0-Gc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1680533612802,"user_tz":-180,"elapsed":5515,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"}},"outputId":"04e7ff71-d5cb-487e-f840-e0d1efe33f83"},"outputs":[{"output_type":"stream","name":"stdout","text":["Seismic attriburibute is calculated\n"]}],"source":["# Calculate RMS attriburibute from on seismic volume\n","gx = calculate_seismic_attribute(seismic_cube, m1, m2, m3)\n","seismic_cube = 0 # Null input seismic data to save memory space for calculation\n","print('======================================')\n","print ('Seismic attriburibute is calculated')"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"42tsLRAPzQXV","outputId":"a99eb585-05ed-4b7b-b058-1fcc6a7eb3f8","executionInfo":{"status":"ok","timestamp":1680534363578,"user_tz":-180,"elapsed":747042,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Started mapping faults on seismic data. Please wait.\n","1/1 [==============================] - 9s 9s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 9s 9s/step\n","1/1 [==============================] - 9s 9s/step\n","1/1 [==============================] - 10s 10s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 6s 6s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 8s 8s/step\n","1/1 [==============================] - 7s 7s/step\n","1/1 [==============================] - 6s 6s/step\n","Faults mapping process is compled\n","Print .dat file with intepreted fauts is save in \n"]}],"source":["# Map Faults using neural network\n","print ('Started mapping faults on seismic data. Please wait.')\n","gy = predict_faults (gx, m1, m2, m3, loaded_model ) \n","print ('Faults mapping process is compled')\n","#Saving dat file with intepreted tectonic faults\n","link_to_output_folder = \"/content/drive/MyDrive/NN_for_tectonic_faults_mapping/2_results_(interpreted_faults)/\"\n","gy.tofile(link_to_output_folder + \"fpxRMS.dat\",format=\"%4\")\n","print('======================================')\n","print('Print .dat file with intepreted fauts is save in ', )"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":2221,"status":"ok","timestamp":1680534420606,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"1BZ__sbfzQXW"},"outputs":[],"source":["# remove all faults with confidence level below trashold\n","gy = denoize_results (gy, trashhold = 0.95) #0.95 is a pretty high trashhold, you might want to use a lower value\n","# import original seismic to review results of faults mapping\n","gx = segyio.tools.cube(file_path)\n"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1-MPwxnzE9KN08ENijWRKK_LqHi3przQa"},"executionInfo":{"elapsed":6072,"status":"ok","timestamp":1680534634284,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"},"user_tz":-180},"id":"oWcXyg89zQXY","outputId":"2f3fafe9-7222-4c58-aaec-2fa46f2b5f60"},"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}],"source":["# Check results prior saving an output faults volume in SEG-Y fromat\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","from matplotlib.colors import Normalize\n","from PIL import Image\n","\n","\n","gx = np.reshape(gx,(m1,m2,m3))\n","gy = np.reshape(gy,(m1,m2,m3))\n","\n","# use k1, k2, k3 to choose seimic section on x-, y-, z-lines\n","k1,k2,k3 = 30,30,310\n","\n","gx1 = np.transpose(gx[k1,:,:])\n","gy1 = np.transpose(gy[k1,:,:])\n","gx2 = np.transpose(gx[:,k2,:])\n","gy2 = np.transpose(gy[:,k2,:])\n","gx3 = np.transpose(gx[:,:,k3])\n","gy3 = np.transpose(gy[:,:,k3])\n","\n","#xline slice====================================================================\n","fig = plt.figure(figsize=(32,32))\n","p1 = plt.subplot(1, 3, 1)\n","p1.imshow(gx1,aspect=1.3,cmap='seismic', vmin=-12000, vmax=12000) \n","p2 = plt.subplot(1,3,3)\n","p2.imshow(gy1,aspect=1.3,cmap='gray')\n","\n","#combined seismic + faults plotted together\n","ax = fig.add_subplot(1, 3, 2)\n","plt.imshow(gx1,aspect=1.4,cmap='seismic', vmin=-12000, vmax=12000)\n","plt.imshow(gy1,aspect=1.3,cmap='gray')\n","\n","#inline slice====================================================================\n","fig = plt.figure(figsize=(32,32))\n","p1 = plt.subplot(1, 3, 1)\n","p1.imshow(gx2,aspect=1.3,cmap='seismic', vmin=-12000, vmax=12000)\n","p2 = plt.subplot(1,3,3)\n","p2.imshow(gy2,aspect=1.3,cmap='gray')\n","\n","#combined seismic + faults plotted together\n","ax = fig.add_subplot(1, 3, 2)\n","plt.imshow(gx2,aspect=1.3,cmap='seismic', vmin=-12000, vmax=12000)\n","plt.imshow(gy2,aspect=1.3,cmap='gray')\n","\n","#time slice====================================================================\n","fig = plt.figure(figsize=(36,36))\n","p1 = plt.subplot(1, 3, 1)\n","p1.imshow(gx3,aspect=1.3,cmap='seismic', vmin=-12000, vmax=12000)\n","p2 = plt.subplot(1,3,3)\n","p2.imshow(gy3,aspect=1.3,cmap='twilight_shifted')\n","\n","#combined seismic + faults plotted together\n","ax = fig.add_subplot(1, 3, 2)\n","plt.imshow(gx3,aspect=1.3,cmap='seismic', vmin=-12000, vmax=12000)\n","plt.imshow(gy3,aspect=1.3,cmap='gray')"]},{"cell_type":"markdown","source":["##**Save results as a SEG-Y file**\n","\n","### Script below uses geometry of input seismic volume to save faults volume in same geographic coordinates, so it can be uploaded and viewed in same project\n"],"metadata":{"id":"E_PHGkAstJER"}},{"cell_type":"code","source":["from shutil import copyfile\n","\n","# Get geometry of input seismic volume\n","with segyio.open(file_path, \"r\") as segyfile:\n","    # Print inline and crossline ranges\n","    print('Amplitude Inline range: ' + str(np.amin(segyfile.ilines)) + ' - ' +str(np.amax(segyfile.ilines))) \n","    print('Amplitude Crossline range: ' + str(np.amin(segyfile.xlines)) + ' - ' +str(np.amax(segyfile.xlines)))\n","\n","dim = np.shape(gy)\n","idx = np.arange(0, dim[0])\n","print(np.amin(idx), np.amax(idx))\n","\n","lns = np.arange(np.amin(segyfile.ilines), np.amax(segyfile.ilines)+1)\n","print(np.amin(lns), np.amax(lns))\n","\n","#Export seismic to SEG-Y using previous file header\n","gy = gy.astype('float32')\n","input_file = file_path\n","output_file = link_to_output_folder + 'Output_faults_identified_on_input_seismic.sgy'\n","#create a copy of input SEG-Y file\n","copyfile(input_file, output_file)\n","print('Saving Faults volume as a SEG-Y file...')\n","with segyio.open(output_file, \"r+\") as dst:\n","    for i,j in zip(lns,idx):\n","        dst.iline[i] = gy[j,:,:]\n","print('\\n','======================================')\n","print ('Faults volume is saved as a SEG-Y file')        "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0eT_g7esmwAA","executionInfo":{"status":"ok","timestamp":1680535240580,"user_tz":-180,"elapsed":41863,"user":{"displayName":"Victor Rusinovich","userId":"02482030301700750077"}},"outputId":"64a99145-045b-4269-ff9b-de7a087b5742"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Amplitude Inline range: 410 - 921\n","Amplitude Crossline range: 541 - 924\n","0 511\n","410 921\n","Saving Faults volume as a SEG-Y file...\n","\n"," ======================================\n","Faults volume is saved as a SEG-Y file\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1seT2kx_EnR10YPSYM0DSki4SqRmd52Xp","timestamp":1671191951160}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"}},"nbformat":4,"nbformat_minor":0}